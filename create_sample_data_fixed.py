#!/usr/bin/env python3
"""
Script to create sample data for testing the generated content system.
"""

import asyncio
import hashlib
from typing import Optional

from src.database.companies import get_company_by_ticker, create_company
from src.database.model_configs import create_model_config, get_model_config_by_name
from src.database.generated_content import create_generated_content, ContentSourceType
from src.utils.logging import get_logger

from src.utils.config import settings

logger = get_logger(__name__)


async def create_sample_model_config():
    """Create a sample model configuration."""

    # Check if model config already exists
    existing_config = get_model_config_by_name("qwen3:14b")
    if existing_config:
        logger.info("Model config already exists", name="qwen3:14b", id=str(existing_config.id))
        return existing_config

    # Create new model config
    options = {
        "num_ctx": 8000,
        "temperature": 0.8,
        "top_k": 40,
        "top_p": 0.9,
        "seed": 42,
        "num_predict": -1,
        "num_gpu": 1
    }

    model_config_data = {
        "name": "qwen3:14b",
        "provider": "ollama",
        "base_url": "http://localhost:11434",
        "options": options,
        "is_default": True
    }

    model_config = create_model_config(model_config_data)
    logger.info("Created model config", id=str(model_config.id), name=model_config.name)
    return model_config


async def create_sample_company():
    """Create or get a sample company (Apple)."""

    # Check if company already exists
    existing_company = get_company_by_ticker("AAPL")
    if existing_company:
        logger.info("Company already exists", id=str(existing_company.id), ticker=existing_company.ticker)
        return existing_company

    # Create new company
    company_data = {
        "name": "Apple Inc.",
        "ticker": "AAPL",
        "cik": "320193",
        "exchange": "NASDAQ",
        "industry": "Technology",
        "sector": "Consumer Electronics",
        "description": "Apple Inc. designs, manufactures, and markets consumer electronics, computer software, and online services."
    }

    company = create_company(company_data)
    logger.info("Created company", id=str(company.id), name=company.name, ticker=company.ticker)
    return company


async def create_sample_generated_content(company, model_config):
    """Create sample generated content for Apple's MDA analysis."""

    # Sample content that would be generated by an LLM
    content_text = """# Management's Discussion and Analysis - Key Insights

## Financial Performance

The company has demonstrated strong financial performance throughout the fiscal year, with significant improvements in several key metrics:

- **Revenue Growth**: 15% year-over-year increase, reaching $2.8 billion
- **Gross Margin**: Improved to 38.2%, up from 36.1% in the previous year
- **Operating Cash Flow**: Strong at $1.2 billion, representing 43% of revenue
- **Net Income**: $890 million, showing consistent profitability

## Market Position

Our competitive position remains strong across all major product categories:

### Consumer Electronics
- Market share increased by 2.3 percentage points
- Customer satisfaction scores at all-time highs
- Successfully launched three new product categories

### Services Revenue
- Recurring revenue streams now represent 35% of total revenue
- Subscription services growing at 28% annually
- Digital ecosystem engagement up 22%

## Risk Factors

While performance has been strong, several risk factors require ongoing attention:

1. **Supply Chain Dependencies**: Geographic concentration in key supplier regions
2. **Regulatory Environment**: Evolving privacy and antitrust regulations
3. **Currency Fluctuations**: International revenue exposure to FX volatility
4. **Technology Disruption**: Rapid pace of innovation in core markets

## Outlook

Management expects continued growth in the next fiscal year, driven by:
- New product launches in Q2 and Q4
- Expansion into three additional international markets
- Strategic partnerships in emerging technology sectors
- Continued investment in R&D capabilities

The foundation for sustained growth remains solid, with strong balance sheet metrics and diversified revenue streams positioning the company well for future opportunities."""

    # Generate content hash
    content_hash = hashlib.sha256(content_text.encode('utf-8')).hexdigest()
    short_hash = content_hash[:12]

    logger.info("Creating generated content", short_hash=short_hash)

    generated_content_data = {
        "company_id": company.id,
        "document_type": "MDA",
        "source_type": ContentSourceType.DOCUMENTS,
        "content": content_text,
        "summary": "Comprehensive financial analysis showing strong performance with 15% revenue growth year-over-year. Key highlights include improved margins and robust cash flow generation.",
        "model_config_id": model_config.id,
        "total_duration": 3.8,
        "content_hash": content_hash,
    }

    generated_content = create_generated_content(generated_content_data)
    logger.info("Created generated content",
                id=str(generated_content.id),
                short_hash=short_hash,
                company=company.name)

    return generated_content


async def main():
    """Main function to populate sample data."""
    try:
        logger.info("Starting sample data population")

        # Initialize database
        from src.database.base import init_db
        init_db(settings.database.url)
        logger.debug("database_initialized")

        # Create sample model config
        model_config = await create_sample_model_config()

        # Create sample company
        company = await create_sample_company()

        # Create sample generated content
        generated_content = await create_sample_generated_content(company, model_config)

        logger.info("Sample data population completed successfully",
                    model_config_id=str(model_config.id),
                    company_id=str(company.id),
                    generated_content_id=str(generated_content.id),
                    content_hash=generated_content.get_short_hash())

        print(f"‚úÖ Sample data created successfully!")
        print(f"üìä Model Config: {model_config.name} ({model_config.id})")
        print(f"üè¢ Company: {company.name} ({company.ticker})")
        print(f"üìÑ Generated Content: {generated_content.get_short_hash()} ({generated_content.id})")
        print(f"üîó View at: /g/{company.ticker}/{generated_content.get_short_hash()}")

    except Exception as e:
        logger.error("Failed to populate sample data", error=str(e))
        print(f"‚ùå Failed to create sample data: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
