---
# Certificate handling for both staging and production environments

- name: Copy certificates directory to deployment path (staging only)
  copy:
    src: "{{ playbook_dir }}/../certificates"
    dest: "{{ deployment_path }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_user }}"
    mode: "0400"
    directory_mode: "0700"
  when: environment_name == "staging"

- name: Install certbot for SSL certificates (production only)
  package:
    name: certbot
    state: present
  become: true
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Create certificates directory for production
  file:
    path: "{{ deployment_path }}/certificates"
    state: directory
    owner: "{{ deployment_user }}"
    group: "{{ deployment_user }}"
    mode: "0700"
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Create webroot directory for certbot
  file:
    path: /var/www/certbot
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  become: true
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Check if certificates already exist
  stat:
    path: "/etc/letsencrypt/live/{{ certbot_domains[0] }}/fullchain.pem"
  register: cert_exists
  become: true
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Generate SSL certificates with certbot (production only)
  shell: |
    certbot certonly --webroot -w /var/www/certbot --non-interactive --agree-tos \
    --email {{ certbot_email }} \
    -d {{ certbot_domains | join(' -d ') }}
  become: true
  when:
    - environment_name == "production"
    - ssl_enabled | default(false)
    - not cert_exists.stat.exists

- name: Create certificate directories for each domain (production only)
  file:
    path: "{{ deployment_path }}/certificates/live/{{ item }}"
    state: directory
    owner: "{{ deployment_user }}"
    group: "{{ deployment_user }}"
    mode: "0700"
  become: true
  loop: "{{ certbot_domains }}"
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Copy SSL certificate files to deployment path (production only)
  copy:
    src: "/etc/letsencrypt/live/{{ item.0 }}/{{ item.1 }}"
    dest: "{{ deployment_path }}/certificates/live/{{ item.0 }}/{{ item.1 }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_user }}"
    mode: "0400"
    remote_src: true
    follow: true
  become: true
  with_nested:
    - "{{ certbot_domains }}"
    - ["fullchain.pem", "privkey.pem"]
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Create certificate renewal script (production only)
  copy:
    content: |
      #!/bin/bash
      # Renew certificates
      certbot renew --quiet

      # Copy renewed certificates to deployment directory
      {% for domain in certbot_domains %}
      if [ -f "/etc/letsencrypt/live/{{ domain }}/fullchain.pem" ]; then
        cp -L "/etc/letsencrypt/live/{{ domain }}/fullchain.pem" "{{ deployment_path }}/certificates/live/{{ domain }}/fullchain.pem"
        cp -L "/etc/letsencrypt/live/{{ domain }}/privkey.pem" "{{ deployment_path }}/certificates/live/{{ domain }}/privkey.pem"
        chown {{ deployment_user }}:{{ deployment_user }} "{{ deployment_path }}/certificates/live/{{ domain }}/fullchain.pem"
        chown {{ deployment_user }}:{{ deployment_user }} "{{ deployment_path }}/certificates/live/{{ domain }}/privkey.pem"
        chmod 400 "{{ deployment_path }}/certificates/live/{{ domain }}/fullchain.pem"
        chmod 400 "{{ deployment_path }}/certificates/live/{{ domain }}/privkey.pem"
      fi
      {% endfor %}

      # Reload nginx
      docker exec symbology-ui nginx -s reload
    dest: /usr/local/bin/renew-certificates.sh
    mode: "0755"
  become: true
  when: environment_name == "production" and ssl_enabled | default(false)

- name: Set up automatic certificate renewal (production only)
  cron:
    name: "Renew SSL certificates"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/renew-certificates.sh"
    state: present
  become: true
  when: environment_name == "production" and ssl_enabled | default(false)
