- name: Display migration information
  debug:
    msg: |
      üîÑ Starting database migration from development to staging
      Source (Development):
        Host: {{ dev_database_host }}:{{ dev_database_port }}
        Database: {{ dev_database_name }}
        User: {{ dev_database_user }}

      Target (Staging):
        Host: {{ database_host }}:{{ database_port }}
        Database: {{ database_name }}
        User: {{ database_user }}

- name: Create temporary migration directory
  file:
    path: "{{ migration_temp_dir }}"
    state: directory
    mode: "0755"

- name: Create temporary migration directory on localhost
  file:
    path: "{{ migration_temp_dir }}"
    state: directory
    mode: "0755"
  delegate_to: localhost

- name: Check development database connectivity
  shell: |
    PGPASSWORD="{{ dev_database_password }}" psql \
      -h "{{ dev_database_host }}" \
      -p "{{ dev_database_port }}" \
      -U "{{ dev_database_user }}" \
      -d "{{ dev_database_name }}" \
      -c "SELECT COUNT(*) FROM companies;" \
      -t
  register: dev_db_check
  delegate_to: localhost

- name: Display development database status
  debug:
    msg: "‚úÖ Development database contains {{ dev_db_check.stdout.strip() }} companies"

- name: Create database dump from development
  shell: |
    echo "üì¶ Creating database dump from development environment..."

    # Create a SQL dump (plain format)
    PGPASSWORD="{{ dev_database_password }}" pg_dump \
      -h "{{ dev_database_host }}" \
      -p "{{ dev_database_port }}" \
      -U "{{ dev_database_user }}" \
      -d "{{ dev_database_name }}" \
      --data-only \
      > "{{ migration_temp_dir }}/{{ dump_file }}"

    echo "‚úÖ Database dump created: {{ migration_temp_dir }}/{{ dump_file }}"
    echo "üìä Dump file size: $(du -h {{ migration_temp_dir }}/{{ dump_file }} | cut -f1)"
  register: dump_result
  delegate_to: localhost

- name: Copy dump file to staging server
  copy:
    src: "{{ migration_temp_dir }}/{{ dump_file }}"
    dest: "{{ migration_temp_dir }}/{{ dump_file }}"
    mode: "0644"

- name: Get dump file size for progress estimation
  stat:
    path: "{{ migration_temp_dir }}/{{ dump_file }}"
  register: dump_file_stat

- name: Staging Restore Pre-Flight
  debug:
    msg: |
      üîÑ Starting database restore...

      üìÅ Dump file size: {{ "%.1f" | format(dump_file_stat.stat.size / 1024 / 1024) }} MB
      ‚è±Ô∏è  Estimated time: {{ ((dump_file_stat.stat.size / 1024 / 1024) * 0.5) | round(0) | int }} seconds

      Source file: {{ migration_temp_dir }}/{{ dump_file }}
      Target database: {{ database_host }}:{{ database_port }}/{{ database_name }}

- name: Restore development data to staging database
  shell: |
    echo "üîÑ Starting PostgreSQL restore process..."
    echo "üìÅ Restoring from: {{ migration_temp_dir }}/{{ dump_file }}"
    echo "üéØ Target database: {{ database_host }}:{{ database_port }}/{{ database_name }}"

    PGPASSWORD="{{ database_password }}" psql \
      -h "{{ database_host }}" \
      -p "{{ database_port }}" \
      -U "{{ database_user }}" \
      -d "{{ database_name }}" \
      -f "{{ migration_temp_dir }}/{{ dump_file }}"

  register: restore_result
- name: Display restore output
  debug:
    var: restore_result.stdout_lines

- name: Display verification start
  debug:
    msg: |
      üîç Starting migration verification...

- name: üìä Counting records in all tables (this may take 30-60 seconds)
  shell: |
    echo "üîç Verifying migration by checking database tables..."

    echo "Table counts:"
    for table in companies filings documents financial_concepts financial_values prompts completions aggregates; do
      COUNT=$(PGPASSWORD="{{ database_password }}" psql \
        -h "{{ database_host }}" \
        -p "{{ database_port }}" \
        -U "{{ database_user }}" \
        -d "{{ database_name }}" \
        -t -A -c "SELECT COUNT(*) FROM ${table};" 2>/dev/null | tr -d ' \n')

      if [ -z "$COUNT" ]; then
        echo "‚ùå Table '${table}' does not exist or is not accessible"
      else
        echo "- ${table}: ${COUNT} records"
      fi
    done

  register: verification_result
  delegate_to: localhost
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Clean up temporary files
  file:
    path: "{{ migration_temp_dir }}"
    state: absent
